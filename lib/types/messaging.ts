// ==========================================
// MESSAGING TYPES
// ==========================================
// TypeScript types for messaging system

export interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  isOnline?: boolean;
  lastSeen?: Date;
}

export interface Conversation {
  id: string;
  type: 'DIRECT' | 'GROUP' | 'BROADCAST' | 'ARCHIVED';
  title?: string;
  description?: string;
  isGroup: boolean;
  groupAvatar?: string;
  maxMembers?: number;
  isEncrypted: boolean;
  isArchived: boolean;
  isBlocked: boolean;
  isMuted: boolean;
  adminOnly: boolean;
  readReceipts: boolean;
  typingStatus: boolean;
  createdAt: Date;
  updatedAt: Date;
  lastActivity: Date;
  participants: ConversationParticipant[];
  messages: Message[];
  unreadCount?: number;
  lastMessage?: Message;
}

export interface ConversationParticipant {
  id: string;
  conversationId: string;
  userId: string;
  user?: User;
  isAdmin: boolean;
  isModerator: boolean;
  canAddMembers: boolean;
  canRemoveMembers: boolean;
  isMuted: boolean;
  isPinned: boolean;
  customName?: string;
  isBlocked: boolean;
  isHidden: boolean;
  joinedAt: Date;
  leftAt?: Date;
  lastSeenAt: Date;
}

export interface Message {
  id: string;
  conversationId: string;
  senderId: string;
  sender?: User;
  content?: string;
  messageType: MessageType;
  mediaUrls: string[];
  mediaMetadata?: any;
  thumbnailUrls: string[];
  isEdited: boolean;
  editedAt?: Date;
  originalContent?: string;
  replyToId?: string;
  replyTo?: Message;
  threadId?: string;
  priority: MessagePriority;
  status: MessageStatus;
  mentions: string[];
  hashtags: string[];
  links?: any;
  scheduledFor?: Date;
  isScheduled: boolean;
  isAutoGenerated: boolean;
  isEncrypted: boolean;
  isDeleted: boolean;
  deletedAt?: Date;
  deletedBy?: string;
  deliveredAt?: Date;
  readCount: number;
  latitude?: number;
  longitude?: number;
  locationName?: string;
  createdAt: Date;
  updatedAt: Date;
  reactions: MessageReaction[];
  reads: MessageRead[];
  replies?: Message[];
}

export interface MessageReaction {
  id: string;
  messageId: string;
  userId: string;
  user?: User;
  emoji: string;
  reaction: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface MessageRead {
  id: string;
  messageId: string;
  conversationId: string;
  userId: string;
  user?: User;
  readAt: Date;
  deliveredAt?: Date;
}

export interface TypingIndicator {
  id: string;
  conversationId: string;
  userId: string;
  user?: User;
  isTyping: boolean;
  startedAt: Date;
  lastUpdate: Date;
}

export interface MessageDraft {
  id: string;
  conversationId: string;
  userId: string;
  content: string;
  messageType: MessageType;
  mediaUrls: string[];
  replyToId?: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface BlockedUser {
  id: string;
  blockerId: string;
  blockedId: string;
  reason?: string;
  isReported: boolean;
  blockedAt: Date;
}

// Enums
export enum MessageType {
  TEXT = 'TEXT',
  IMAGE = 'IMAGE',
  VIDEO = 'VIDEO',
  AUDIO = 'AUDIO',
  FILE = 'FILE',
  LOCATION = 'LOCATION',
  CONTACT = 'CONTACT',
  STICKER = 'STICKER',
  EMOJI_REACTION = 'EMOJI_REACTION',
  VOICE_NOTE = 'VOICE_NOTE',
  SYSTEM_MESSAGE = 'SYSTEM_MESSAGE'
}

export enum MessageStatus {
  SENT = 'SENT',
  DELIVERED = 'DELIVERED',
  READ = 'READ',
  FAILED = 'FAILED',
  DELETED = 'DELETED'
}

export enum ConversationType {
  DIRECT = 'DIRECT',
  GROUP = 'GROUP',
  BROADCAST = 'BROADCAST',
  ARCHIVED = 'ARCHIVED'
}

export enum MessagePriority {
  LOW = 'LOW',
  NORMAL = 'NORMAL',
  HIGH = 'HIGH',
  URGENT = 'URGENT'
}

// API Response Types
export interface ConversationsResponse {
  conversations: Conversation[];
  totalCount: number;
  hasMore: boolean;
}

export interface MessagesResponse {
  messages: Message[];
  totalCount: number;
  hasMore: boolean;
  conversation: Conversation;
}

export interface CreateConversationRequest {
  type: ConversationType;
  participantIds: string[];
  title?: string;
  description?: string;
  isGroup?: boolean;
}

export interface SendMessageRequest {
  conversationId: string;
  content?: string;
  messageType: MessageType;
  mediaUrls?: string[];
  replyToId?: string;
  mentions?: string[];
}

export interface EditMessageRequest {
  messageId: string;
  content: string;
}

export interface AddReactionRequest {
  messageId: string;
  emoji: string;
  reaction: string;
}

export interface MarkAsReadRequest {
  conversationId: string;
  messageIds: string[];
}

export interface TypingStatusRequest {
  conversationId: string;
  isTyping: boolean;
}

// Real-time Event Types
export interface MessageEvent {
  type: 'message:new' | 'message:edited' | 'message:deleted';
  data: Message;
}

export interface ReactionEvent {
  type: 'message:reaction:add' | 'message:reaction:remove';
  data: MessageReaction;
}

export interface TypingEvent {
  type: 'conversation:typing:start' | 'conversation:typing:stop';
  data: TypingIndicator;
}

export interface ReadEvent {
  type: 'message:read';
  data: MessageRead;
}

export interface UserStatusEvent {
  type: 'user:online' | 'user:offline';
  data: { userId: string; isOnline: boolean };
}

export interface ConversationEvent {
  type: 'conversation:updated' | 'conversation:new';
  data: Conversation;
}

// UI State Types
export interface MessagingState {
  conversations: Conversation[];
  activeConversationId: string | null;
  messages: { [conversationId: string]: Message[] };
  typingUsers: { [conversationId: string]: User[] };
  onlineUsers: { [userId: string]: boolean };
  unreadCounts: { [conversationId: string]: number };
  loading: boolean;
  error: string | null;
}

export interface MessageInputState {
  content: string;
  replyTo: Message | null;
  mediaFiles: File[];
  isTyping: boolean;
  draft: MessageDraft | null;
}

// Search and Filter Types
export interface MessageSearchQuery {
  query: string;
  conversationId?: string;
  messageType?: MessageType;
  senderId?: string;
  dateFrom?: Date;
  dateTo?: Date;
}

export interface ConversationFilter {
  type?: ConversationType;
  isArchived?: boolean;
  isMuted?: boolean;
  hasUnread?: boolean;
  participantId?: string;
}
